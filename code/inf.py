#__init__
#初始化對象屬性
#__init__ 方法允許你在創建對象時設置屬性的初始值
#自動調用
#當你創建一個類的實例時，__init__ 方法會自動被調用。你不需要手動調用它。
#支持繼承
#__init__ 支持在子類中被覆寫或擴展，使你能夠在子類中進行更多特定的初始化操作。
#同時，通過 super().__init__()，你還可以確保父類的初始化操作正常執行。


#self 用來引用當前的類實例，即當前對象。
#類似地，在 Java 中，this 用來引用當前對象。
#self 和 this 都用來區分對象的屬性與方法參數，避免命名衝突。

#self與this的不同點
#self:顯式
#必須顯式地作為方法的第一個參數傳遞，並且在方法內部必須顯式地使用 self 來引用對象的屬性或方法。
#僅用於方法內部引用對象的屬性和方法
#只是命名慣例，可變更(但不推薦)
#this:隱式
#是隱式存在的，你不需要將它作為參數傳遞。你可以選擇使用或不使用 this 來引用當前對象的屬性和方法。
#除了用於引用當前對象外，還可以用來調用類的構造函數
'''public Player(String name, int age) {
    this(name);  // 調用另一個構造函數
    this.age = age;}'''
#不能被替換或省略

# Sprite 是一個類別，提供了便捷的方法來處理和管理這些遊戲元素，例如繪製、移動、碰撞檢測等。

# 1. Sprite 的基本概念
# Sprite 是一個基礎類，代表了所有在屏幕上可以看到的物件。Pygame 使用 Sprite 類來封裝圖像及其相關的屬性，如位置、速度和碰撞邊界。
# Sprite 類本身不提供實際的功能，但您可以繼承這個類並擴展其功能來實現自定義的遊戲邏輯。

# 2. 為什麼使用 Sprite?
# 使用 Sprite 的好處包括：
# 代碼組織更清晰：通過將遊戲中的每個角色或物件封裝成 Sprite，使得代碼更加模塊化和易於維護。
# 內建的碰撞檢測：Sprite 提供了內建的碰撞檢測方法，使得處理遊戲中物件之間的碰撞變得簡單。
# 高效的批量渲染：Sprite 可以加入到一個 Group 中，Group 提供了批量渲染和批量更新的功能，可以提高遊戲性能。

# 3. Sprite 的基本用法
# 定義一個 Sprite 類
# 要使用 Sprite，首先需要創建一個繼承自 pygame.sprite.Sprite 的自定義類。在這個類中，您可以定義角色的屬性和行為。

# 使用 Sprite 群組 (Group)
# Pygame 提供了一個 Group 類來管理和處理多個 Sprite。Group 可以高效地更新和渲染所有包含的 Sprite，使得代碼更簡潔。

# Sprite 碰撞檢測
# Pygame 提供了簡單的碰撞檢測函數，如 spritecollide() 和 groupcollide()，用於檢測 Sprite 之間的碰撞。

# .get_rect(參數=(x座標,y座標))
# 預設參數參考:
# topleft: 設置矩形的左上角位置。
# topright: 設置矩形的右上角位置。
# bottomleft: 設置矩形的左下角位置。
# bottomright: 設置矩形的右下角位置。
# midtop: 設置矩形的上邊緣中點位置。
# midbottom: 設置矩形的下邊緣中點位置。
# midleft: 設置矩形的左邊緣中點位置。
# midright: 設置矩形的右邊緣中點位置。
# center: 設置矩形的中心位置。
# centerx: 設置矩形的中心的 x 座標。
# centery: 設置矩形的中心的 y 座標。
